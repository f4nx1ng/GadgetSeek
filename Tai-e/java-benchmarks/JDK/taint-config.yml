sources:
  - { kind: param, method: "<java.rmi.server.UnicastRemoteObject: void readObject(java.io.ObjectInputStream)>", index: 0 }
#  - { kind: param, method: "<javax.management.BadAttributeValueExpException: void readObject(java.io.ObjectInputStream)>", index: 0}
#  - { kind: param, method: "<java.util.PriorityQueue: void siftDownUsingComparator(int,java.lang.Object)>", index: 1 }
#  - { kind: param, method: "<java.util.HashSet: void readObject(java.io.ObjectInputStream)>", index: 0}
#  - { kind: param, method: "<java.util.HashMap: void readObject(java.io.ObjectInputStream)>", index: 0}
#  - { kind: param, method: "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>", index: 0 }
#  - { kind: param, method: "<com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase: void readObject(java.io.ObjectInputStream)>", index: 0 }
#  - { kind: param, method: "<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>", index: 0 }
#  - { kind: param, method: "<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>", index: 2 }
#  - { kind: param, method: "<org.jboss.weld.interceptor.proxy.InterceptorMethodHandler: void readObject(java.io.ObjectInputStream)>", index: 0 }
#  - { kind: param, method: "<javax.management.BadAttributeValueExpException: void readObject(java.io.ObjectInputStream)>", index: 0}


sinks:
#  - { method: "<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>", index: 0 }
#  - { method: "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>", index: 0}
#  - { method: "<clojure.main$eval_opt: java.lang.Object invoke(java.lang.Object)>", index: 0 }
#  - { method: "<org.hibernate.type.ComponentType: int getHashCode(java.lang.Object)>", index: base }
# - { method: "<org.hibernate.internal.util.ValueHolder: java.lang.Object getValue()>", index: base }
# - { method: "<sun.rmi.server.UnicastServerRef: java.rmi.Remote exportObject(java.rmi.Remote,java.lang.Object,boolean)>",index: 0}
# - { method: "<sun.rmi.transport.tcp.TCPEndpoint: void exportObject(sun.rmi.transport.Target)>", index: 0}
 - { method: "<sun.rmi.transport.tcp.TCPTransport: void exportObject(sun.rmi.transport.Target)>", index: 0}
#  - { method: "<org.apache.commons.collections.functors.ChainedTransformer: java.lang.Object transform(java.lang.Object)>", index: base}
#  - { method: "<org.apache.commons.collections.map.LazyMap: java.lang.Object get(java.lang.Object)>", index: base }
#  - { method: "<org.apache.commons.collections.functors.InvokerTransformer: java.lang.Object transform(java.lang.Object)>", index: base}
#  - { method: "<org.apache.commons.collections.keyvalue.TiedMapEntry: java.lang.Object getValue()>", index: base }
#  - { method: "<org.apache.commons.collections.keyvalue.TiedMapEntry: java.lang.String toString()>", index: base }
#  - { method: "<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>", index: base }

transfers:
  - { method: "<java.io.ObjectInputStream: java.lang.Object readObject()>", from: base, to: result }
  - { method: "<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>", from: base, to: result }
  - { method: "<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object get(java.lang.String, java.lang.Object)>", from: base, to: result }
  - { method: "<java.io.FileOutputStream: void <init>(java.lang.String)>", from: 0, to: base }
  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>", from: 0, to: result }
  - { method: "<java.lang.StringBuilder: java.lang.String toString()>", from: base, to: result }
  - { method: "<java.lang.Object: java.lang.Class getClass()>", from: base, to: result }
  - { method: "<java.lang.Class: java.lang.String getName()>", from: base, to: result }
  - { method: "<java.lang.String: java.lang.String substring(int)>", from: base, to: result }
  - { method: "<javax.naming.Reference: java.lang.String getFactoryClassLocation()>", from: base, to: result }
  - { method: "<javax.naming.Reference: java.lang.String getFactoryClassName()>", from: base, to: result }
  - { method: "<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>", from: 0, to: result}
  - { method: "<java.net.URL: void <init>(java.lang.String)>", from: 0, to: result}
  - { method: "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>", from: 2, to: result}
  - { method: "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>", from: 0, to: result}
  - { method: "<clojure.lang.RT: java.lang.Object get(java.lang.Object,java.lang.Object)>", from: 0, to: result}
  - { method: "<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object getDelegate()>", from: base, to: result}
  - { method: "<org.jboss.weld.interceptor.builder.InterceptionModelImpl: java.util.List getInterceptors(org.jboss.weld.interceptor.spi.model.InterceptionType,java.lang.reflect.Method)>", from: base, to: result}
  - { method: "<java.util.ArrayList: java.util.Iterator iterator()>", from: base, to: result }
  - { method: "<java.util.ArrayList$Itr: java.lang.Object next()>", from: base, to: result }
  - { method: "<org.jboss.weld.interceptor.reader.SimpleInterceptorMetadata: org.jboss.weld.interceptor.proxy.InterceptorInvocation getInterceptorInvocation(java.lang.Object,org.jboss.weld.interceptor.spi.metadata.InterceptorMetadata,org.jboss.weld.interceptor.spi.model.InterceptionType)>", from: 1, to: result }
  - { method: "<java.util.ArrayList: boolean add(java.lang.Object)>", from: 0, to: base }
  - { method: "<org.jboss.weld.interceptor.proxy.SimpleInterceptionChain: void <init>(java.util.Collection,java.lang.Object,java.lang.reflect.Method)>", from: 0, to: base}
  - { method: "<org.jboss.interceptor.proxy.DefaultInvocationContextFactory: javax.interceptor.InvocationContext newInvocationContext(org.jboss.interceptor.spi.context.InterceptionChain,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>", from: 0, to: result}
  - { method: "<org.apache.logging.log4j.message.ReusableMessageFactory: org.apache.logging.log4j.message.Message newMessage(java.lang.String)>", from: 0, to: result, type: "org.apache.logging.log4j.message.ReusableSimpleMessage" }
  - { method: "<org.apache.logging.log4j.core.impl.ReusableLogEventFactory: org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)>", from: 4, to: result, type: "org.apache.logging.log4j.core.impl.MutableLogEvent" }
  - { method: "<org.apache.logging.log4j.core.impl.MutableLogEvent: void formatTo(java.lang.StringBuilder)>", from: base, to: 0 }
  - { method: "<java.lang.StringBuilder: void <init>(java.lang.String)>", from: 0, to: base }
  - { method: "<java.lang.StringBuilder: void getChars(int,int,char[],int)>", from: base, to: 2 }
  - { method: "<java.lang.String: void <init>(char[],int,int)>", from: 0, to: base }
  - { method: "<org.mozilla.javascript.Wrapper: java.lang.Object unwrap()>", from: base, to: result }
  - { method: "<org.mozilla.javascript.Function: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>", from: 2, to: base}
  - { method: "<com.vaadin.data.util.PropertysetItem: com.vaadin.data.Property getItemProperty(java.lang.Object)>", from: base, to: result }
  - { method: "<sun.rmi.transport.Target: void <init>(java.rmi.Remote,sun.rmi.server.Dispatcher,java.rmi.Remote,java.rmi.server.ObjID,boolean)>", from: 0, to: base }
