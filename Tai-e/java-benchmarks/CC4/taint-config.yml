sources:
  #  - { kind: call, method: "<URLDNS: byte[] getpayload()>", index: result }
  - { kind: param, method: "<java.util.HashSet: void readObject(java.io.ObjectInputStream)>", index: 0 }
#  - { kind: param, method: "<java.util.HashMap: void readObject(java.io.ObjectInputStream)>", index: 0}
#  - { kind: param, method: "<java.util.HashMap: int hash(java.lang.Object)>", index: 0}
#  - { kind: param, method: "<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>", index: 1}
#  - { kind: param, method: "<java.util.PriorityQueue: void readObject(java.io.ObjectInputStream)>", index: 0 }
#  - { kind: param, method: "<javax.management.BadAttributeValueExpException: void readObject(java.io.ObjectInputStream)>", index: 0}
#  - { kind: param, method: "<java.util.PriorityQueue: void siftDownUsingComparator(int,java.lang.Object)>", index: 1 }
sinks:
  #- { method: "<java.io.FileOutputStream: void write(byte[])>", index: base }
  - { method: "<org.apache.commons.collections4.functors.ChainedTransformer: java.lang.Object transform(java.lang.Object)>", index: base}
#  - { method: "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>", index: 0}


transfers:
#  - { method: "<java.io.ByteArrayInputStream: void <init>(byte[])>", from: 0, to: base }
#  - { method: "<java.io.ObjectInputStream: void <init>(java.io.InputStream)>", from: 0, to: base }
#  - { method: "<java.io.ObjectInputStream: java.lang.Object readObject()>", from: base, to: result }
  - { method: "<java.io.ObjectInputStream: java.lang.Object readObject()>", from: base, to: result }
  - { method: "<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>", from: base, to: result }
  - { method: "<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object get(java.lang.String, java.lang.Object)>", from: base, to: result }
  - { method: "<java.io.FileOutputStream: void <init>(java.lang.String)>", from: 0, to: base }
  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>", from: 0, to: result }
  - { method: "<java.lang.StringBuilder: java.lang.String toString()>", from: base, to: result }
  - { method: "<java.lang.Object: java.lang.Class getClass()>", from: base, to: result }
  - { method: "<java.lang.Class: java.lang.String getName()>", from: base, to: result }
  - { method: "<java.lang.String: java.lang.String substring(int)>", from: base, to: result }

